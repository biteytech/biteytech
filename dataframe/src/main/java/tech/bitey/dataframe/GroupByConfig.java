/*
 * Copyright 2021 biteytech@protonmail.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package tech.bitey.dataframe;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;

import org.joda.beans.ImmutableBean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.TypedMetaBean;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.ImmutableDefaults;
import org.joda.beans.gen.ImmutableValidator;
import org.joda.beans.gen.PropertyDefinition;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;
import org.joda.beans.impl.direct.MinimalMetaBean;

@BeanDefinition(style = "minimal")
public final class GroupByConfig implements ImmutableBean {

    @PropertyDefinition(validate = "notEmpty")
    private final List<String> groupByNames;

    @PropertyDefinition(validate = "notNull")
    private final List<String> derivedNames;

    @PropertyDefinition(validate = "notNull")
    private final List<ColumnType<?>> derivedTypes;

    @PropertyDefinition(validate = "notNull")
    private final List<GroupByReduction> reductions;

    @ImmutableDefaults
    private static void applyDefaults(Builder builder) {
        builder.derivedNames(new ArrayList<>());
        builder.derivedTypes(new ArrayList<>());
        builder.reductions(new ArrayList<>());
    }

    @ImmutableValidator
    private void validate() {

        Pr.checkState(derivedNames.size() == derivedTypes.size(),
                "derivedNames.size() != derivedTypes.size()");
        Pr.checkState(derivedNames.size() == reductions.size(),
                "derivedNames.size() != reductions.size()");
    }

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code GroupByConfig}.
     */
    private static final TypedMetaBean<GroupByConfig> META_BEAN =
            MinimalMetaBean.of(
                    GroupByConfig.class,
                    new String[] {
                            "groupByNames",
                            "derivedNames",
                            "derivedTypes",
                            "reductions"},
                    () -> new GroupByConfig.Builder(),
                    b -> b.getGroupByNames(),
                    b -> b.getDerivedNames(),
                    b -> b.getDerivedTypes(),
                    b -> b.getReductions());

    /**
     * The meta-bean for {@code GroupByConfig}.
     * @return the meta-bean, not null
     */
    public static TypedMetaBean<GroupByConfig> meta() {
        return META_BEAN;
    }

    static {
        MetaBean.register(META_BEAN);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static GroupByConfig.Builder builder() {
        return new GroupByConfig.Builder();
    }

    private GroupByConfig(
            List<String> groupByNames,
            List<String> derivedNames,
            List<ColumnType<?>> derivedTypes,
            List<GroupByReduction> reductions) {
        JodaBeanUtils.notEmpty(groupByNames, "groupByNames");
        JodaBeanUtils.notNull(derivedNames, "derivedNames");
        JodaBeanUtils.notNull(derivedTypes, "derivedTypes");
        JodaBeanUtils.notNull(reductions, "reductions");
        this.groupByNames = Collections.unmodifiableList(new ArrayList<>(groupByNames));
        this.derivedNames = Collections.unmodifiableList(new ArrayList<>(derivedNames));
        this.derivedTypes = Collections.unmodifiableList(new ArrayList<>(derivedTypes));
        this.reductions = Collections.unmodifiableList(new ArrayList<>(reductions));
        validate();
    }

    @Override
    public TypedMetaBean<GroupByConfig> metaBean() {
        return META_BEAN;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the groupByNames.
     * @return the value of the property, not empty
     */
    public List<String> getGroupByNames() {
        return groupByNames;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the derivedNames.
     * @return the value of the property, not null
     */
    public List<String> getDerivedNames() {
        return derivedNames;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the derivedTypes.
     * @return the value of the property, not null
     */
    public List<ColumnType<?>> getDerivedTypes() {
        return derivedTypes;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the reductions.
     * @return the value of the property, not null
     */
    public List<GroupByReduction> getReductions() {
        return reductions;
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            GroupByConfig other = (GroupByConfig) obj;
            return JodaBeanUtils.equal(groupByNames, other.groupByNames) &&
                    JodaBeanUtils.equal(derivedNames, other.derivedNames) &&
                    JodaBeanUtils.equal(derivedTypes, other.derivedTypes) &&
                    JodaBeanUtils.equal(reductions, other.reductions);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(groupByNames);
        hash = hash * 31 + JodaBeanUtils.hashCode(derivedNames);
        hash = hash * 31 + JodaBeanUtils.hashCode(derivedTypes);
        hash = hash * 31 + JodaBeanUtils.hashCode(reductions);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("GroupByConfig{");
        buf.append("groupByNames").append('=').append(JodaBeanUtils.toString(groupByNames)).append(',').append(' ');
        buf.append("derivedNames").append('=').append(JodaBeanUtils.toString(derivedNames)).append(',').append(' ');
        buf.append("derivedTypes").append('=').append(JodaBeanUtils.toString(derivedTypes)).append(',').append(' ');
        buf.append("reductions").append('=').append(JodaBeanUtils.toString(reductions));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code GroupByConfig}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<GroupByConfig> {

        private List<String> groupByNames = Collections.emptyList();
        private List<String> derivedNames = Collections.emptyList();
        private List<ColumnType<?>> derivedTypes = Collections.emptyList();
        private List<GroupByReduction> reductions = Collections.emptyList();

        /**
         * Restricted constructor.
         */
        private Builder() {
            applyDefaults(this);
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(GroupByConfig beanToCopy) {
            this.groupByNames = new ArrayList<>(beanToCopy.getGroupByNames());
            this.derivedNames = new ArrayList<>(beanToCopy.getDerivedNames());
            this.derivedTypes = new ArrayList<>(beanToCopy.getDerivedTypes());
            this.reductions = new ArrayList<>(beanToCopy.getReductions());
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case -29221454:  // groupByNames
                    return groupByNames;
                case -937256149:  // derivedNames
                    return derivedNames;
                case -930997156:  // derivedTypes
                    return derivedTypes;
                case -1201234848:  // reductions
                    return reductions;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @SuppressWarnings("unchecked")
        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case -29221454:  // groupByNames
                    this.groupByNames = (List<String>) newValue;
                    break;
                case -937256149:  // derivedNames
                    this.derivedNames = (List<String>) newValue;
                    break;
                case -930997156:  // derivedTypes
                    this.derivedTypes = (List<ColumnType<?>>) newValue;
                    break;
                case -1201234848:  // reductions
                    this.reductions = (List<GroupByReduction>) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public GroupByConfig build() {
            return new GroupByConfig(
                    groupByNames,
                    derivedNames,
                    derivedTypes,
                    reductions);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the groupByNames.
         * @param groupByNames  the new value, not empty
         * @return this, for chaining, not null
         */
        public Builder groupByNames(List<String> groupByNames) {
            JodaBeanUtils.notEmpty(groupByNames, "groupByNames");
            this.groupByNames = groupByNames;
            return this;
        }

        /**
         * Sets the {@code groupByNames} property in the builder
         * from an array of objects.
         * @param groupByNames  the new value, not empty
         * @return this, for chaining, not null
         */
        public Builder groupByNames(String... groupByNames) {
            return groupByNames(Arrays.asList(groupByNames));
        }

        /**
         * Sets the derivedNames.
         * @param derivedNames  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder derivedNames(List<String> derivedNames) {
            JodaBeanUtils.notNull(derivedNames, "derivedNames");
            this.derivedNames = derivedNames;
            return this;
        }

        /**
         * Sets the {@code derivedNames} property in the builder
         * from an array of objects.
         * @param derivedNames  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder derivedNames(String... derivedNames) {
            return derivedNames(Arrays.asList(derivedNames));
        }

        /**
         * Sets the derivedTypes.
         * @param derivedTypes  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder derivedTypes(List<ColumnType<?>> derivedTypes) {
            JodaBeanUtils.notNull(derivedTypes, "derivedTypes");
            this.derivedTypes = derivedTypes;
            return this;
        }

        /**
         * Sets the {@code derivedTypes} property in the builder
         * from an array of objects.
         * @param derivedTypes  the new value, not null
         * @return this, for chaining, not null
         */
        @SafeVarargs
        public final Builder derivedTypes(ColumnType<?>... derivedTypes) {
            return derivedTypes(Arrays.asList(derivedTypes));
        }

        /**
         * Sets the reductions.
         * @param reductions  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder reductions(List<GroupByReduction> reductions) {
            JodaBeanUtils.notNull(reductions, "reductions");
            this.reductions = reductions;
            return this;
        }

        /**
         * Sets the {@code reductions} property in the builder
         * from an array of objects.
         * @param reductions  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder reductions(GroupByReduction... reductions) {
            return reductions(Arrays.asList(reductions));
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(160);
            buf.append("GroupByConfig.Builder{");
            buf.append("groupByNames").append('=').append(JodaBeanUtils.toString(groupByNames)).append(',').append(' ');
            buf.append("derivedNames").append('=').append(JodaBeanUtils.toString(derivedNames)).append(',').append(' ');
            buf.append("derivedTypes").append('=').append(JodaBeanUtils.toString(derivedTypes)).append(',').append(' ');
            buf.append("reductions").append('=').append(JodaBeanUtils.toString(reductions));
            buf.append('}');
            return buf.toString();
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
